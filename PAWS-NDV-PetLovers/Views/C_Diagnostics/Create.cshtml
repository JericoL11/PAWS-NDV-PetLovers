@model PAWS_NDV_PetLovers.ViewModels.TransactionsVm
@{
    ViewData["Title"] = "Create Diagnostics";
}

<div class="bg-secondary bg-opacity-10 py-2 mb-3">
    <div class="container">
        <h1>Diagnostics</h1>
    </div>
</div>

<div class="container">
    <form method="post" asp-action="Create">
        <div class="row">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="container">
                <h3>Pet Information</h3>
            </div>

            <!-- Pet Information Fields -->
            <div class="form-group col-lg-3 col-md-6">
                <label asp-for="Diagnostics.petId" class="control-label"></label>
                <input asp-for="Diagnostics.petId" class="form-control" readonly />
            </div>
            <div class="form-group col-lg-3 col-md-6">
                <label asp-for="Pets.petName" class="control-label"></label>
                <input asp-for="Pets.petName" class="form-control" readonly />
            </div>
            <div class="form-group col-lg-3 col-md-6">
                <label asp-for="Pets.breed" class="control-label"></label>
                <input asp-for="Pets.breed" class="form-control" readonly />
            </div>
            <div class="form-group col-lg-3 col-md-6">
                <label asp-for="Pets.gender" class="control-label"></label>
                <input asp-for="Pets.gender" class="form-control" readonly />
            </div>
            <div class="form-group col-lg-3 col-md-6">
                <label asp-for="Pets.age" class="control-label"></label>
                <input asp-for="Pets.age" class="form-control" readonly />
            </div>
            <div class="form-group col-lg-3 col-md-6">
                <label asp-for="Pets.bdate" class="control-label"></label>
                <input type="hidden" asp-for="Pets.bdate" class="form-control" readonly />
                <input value="@Model.Pets.bdate?.ToString("MMM. dd, yyyy")" class="form-control" readonly />
            </div>

    

            <!-- Owner Information -->
            <div class="form-group col-lg-3 col-md-6">
                <label class="control-label">Owner ID - Name</label>
                <input value="@($"{Model.Pets.ownerId} - {Model.Pets.owner.fname} {Model.Pets.owner.lname}")" class="form-control" readonly />
            </div>


            <div class="row mt-3">
                <div class="form-group col-lg-3 visually-hidden">
                    <!-- Hidden Field for Date -->
                    <label asp-for="Diagnostics.date" class="control-label"></label>
                    <input asp-for="Diagnostics.date" class="form-control dateInput" readonly />

                </div>
                <div class="form-group col-lg-3">
                    <!-- Hidden Field for Date -->
                    <label asp-for="Diagnostics.weight" class="control-label"></label>
                    <input asp-for="Diagnostics.weight" class="form-control bg-light decimal-input" placeholder="Input weight" required />
                </div>
            </div>


            <!-- Diagnostics Details -->
<div class="col-12 ">
    <table class="table mt-2" id="DetailsTable">
        <thead>
            <tr>
                <th>Service Name</th>
                <th>Details</th>
                <th class="text-end">
                    <button type="button" class="btn btn-success px-2" id="addRow">Add Service</button>
                </th>
            </tr>
        </thead>
        <tbody>
            <!-- Loop through existing services if any -->
            @if (Model.Appointment != null && Model.Appointment.IAppDetails != null)
            {
                for (int i = 0; i < Model.Appointment.IAppDetails.Count(); i++)
                {
                    var detail = Model.Appointment.IAppDetails.ElementAt(i).serviceID;

                    <tr class="detailRow">
                        <td> 
                            <div class="form-group mt-2">
                                <select name="Diagnostics.IdiagnosticDetails[@i].serviceId" class="form-control service-select" required>
                                    <option value="" data-price="0" disabled>Select Service</option>

                                    <!-- Loop through NA-type services and set the selected service -->
                                    @foreach (var service in Model.Services.Where(s => s.serviceType == "NA"))
                                    {
                                        if (service.serviceId == detail)
                                        {
                                            <option value="@service.serviceId"
                                                    data-price="@service.serviceCharge"
                                                    data-service-type="@service.serviceType.ToLower()"
                                                    data-service-name="@service.serviceName.ToLower()"
                                                    selected="selected">
                                                @service.serviceName
                                            </option>
                                        }
                                        else
                                        {
                                            <option value="@service.serviceId"
                                                    data-price="@service.serviceCharge"
                                                    data-service-type="@service.serviceType.ToLower()"
                                                    data-service-name="@service.serviceName.ToLower()">
                                                @service.serviceName
                                            </option>
                                        }
                                    }

                                    @* Laboratory services grouped under "Laboratory test" optgroup *@
                                    @{
                                        // Get all distinct service types for conditional rendering
                                        var checkTypes = Model.Services
                                        .Select(s => s.serviceType)
                                        .Distinct();

                                        // Convert types to lowercase for easier comparison
                                        var type = string.Join(",", checkTypes).ToLower();
                                    }

                                    @if (type.Contains("lab"))
                                    {
                                        <optgroup label="Laboratory test">
                                            @foreach (var service in Model.Services.Where(s => s.serviceType != "NA"))
                                            {
                                                if (service.serviceId == detail)
                                                {
                                                    <option value="@service.serviceId"
                                                            data-price="@service.serviceCharge"
                                                            data-service-type="@service.serviceType.ToLower()"
                                                            data-service-name="@service.serviceName.ToLower()"
                                                            selected="selected">
                                                        @service.serviceName
                                                    </option>
                                                }
                                                else
                                                {
                                                    <option value="@service.serviceId"
                                                            data-price="@service.serviceCharge"
                                                            data-service-type="@service.serviceType.ToLower()"
                                                            data-service-name="@service.serviceName.ToLower()">
                                                        @service.serviceName
                                                    </option>
                                                }
                                            }
                                        </optgroup>
                                    }
                                </select>
                            </div>
                        </td>

                        <td>
                            <div class="prescription">
                                <textarea name="Diagnostics.IdiagnosticDetails[@i].details" class="form-control bg-light" rows="7" style="resize: none;" placeholder="(Optional)"></textarea>
                            </div>
                        </td>

                        <td>
                            <button type="button" class="btn btn-danger removeRow">Remove</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr class="detailRow">
                    <td>
                        <div class="form-group mt-2">
                            <select name="Diagnostics.IdiagnosticDetails[0].serviceId" class="form-control service-select" required>
                                <option value="" data-price="0" disabled selected>Select Service</option>

                                @foreach (var service in Model.Services.Where(s => s.serviceType == "NA"))
                                {
                                    <option value="@service.serviceId" data-price="@service.serviceCharge" data-service-type="@service.serviceType.ToLower()" data-service-name="@service.serviceName.ToLower()">
                                        @service.serviceName
                                    </option>
                                }

                                @* for display laboratory items *@
                                @{
                                    //check services
                                    var checkTypes = Model.Services
                                    .Select(s => s.serviceType)
                                    .Distinct();

                                    var type = string.Join(",", checkTypes).ToLower();

                                }
                                @if (type.Contains("lab"))
                                {
                                    <optgroup label="Laboratory test">
                                        @foreach (var service in Model.Services.Where(s => s.serviceType != "NA"))
                                        {
                                            <option value="@service.serviceId" data-price="@service.serviceCharge" data-service-type="@service.serviceType.ToLower()" data-service-name="@service.serviceName.ToLower()">
                                                @service.serviceName
                                            </option>
                                        }
                                    </optgroup>
                                }

                            </select>
                            <input type="hidden" name="Diagnostics.IdiagnosticDetails[0].totalServicePayment" class="service-charge" value="" />
                        </div>
                    </td>

                    <td>
                        <div class="prescription">
                            <textarea name="Diagnostics.IdiagnosticDetails[0].details" class="form-control bg-light" rows="7" style="resize: none;" placeholder="(Optional)"></textarea>
                        </div>
                    </td>

                    <td>
                        <button type="button" class="btn btn-danger removeRow">Remove</button>
                    </td>
                </tr>
            }
           
        </tbody>
    </table>
</div>
            <div class="form-group text-end">
             @*    <label asp-for="Diagnostics.totalServicePayment" class="control-label visually-hidden fw-bold"></label>
                <input asp-for="Diagnostics.totalServicePayment" id="totalPayment" class="form-control  visually-hidden" readonly /> *@
                <a asp-action="Edit" asp-controller="Owners" class="btn btn-secondary" asp-route-id="@Model.Pets.ownerId">Cancel</a>
                <input type="hidden" name="ownerId" value="@Model.Pets.ownerId" />
                <input type="submit" value="Save" class="btn btn-primary btn-md px-4 my-2" />
            </div>
        </div>
    </form>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function () {
            // Function to update the name attributes of input/select elements in each row
            function updateRowNames() {
                $('#DetailsTable tbody tr').each(function (index) {
                    $(this).find('input, select, textarea').each(function () {
                        var name = $(this).attr('name');
                        if (name) {
                            // Replace only the index inside the square brackets
                            var newName = name.replace(/\[\d+\]/, '[' + index + ']');
                            $(this).attr('name', newName);
                        }
                    });
                });
            }

            // Function to calculate and update the total price based on service charges
            function updateTotalPrice() {
                var totalPrice = 0;

                $('#DetailsTable tbody tr').each(function () {
                    var $select = $(this).find('select.service-select');
                    var price = parseFloat($select.find('option:selected').data('price')) || 0;
                    $(this).find('input.service-charge').val(price); // Update hidden input with price
                    totalPrice += price; // Accumulate total price
                });

                $('#totalPayment').val(totalPrice.toFixed(2)); // Display total payment with 2 decimal places
            }

            // Event handler for when a service is selected
            $(document).on('change', 'select.service-select', function () {
                updateTotalPrice(); // Update total price whenever a service is selected or changed
            });

            // Add a new row to the table when "Add Service" button is clicked
            $('#addRow').click(function () {
                var rowCount = $('#DetailsTable tbody tr').length;
                var newRow = $('.detailRow').first().clone(); // Clone the first row

                newRow.find('input, select, textarea').each(function () {
                    var name = $(this).attr('name');
                    if (name) {
                        var newName = name.replace(/\[\d+\]/, '[' + rowCount + ']'); // Update name attribute for the new row
                        $(this).attr('name', newName);
                    }
                    $(this).val(''); // Clear the value of the input/select
                });

                newRow.appendTo($('#DetailsTable tbody')); // Append new row to table body
                updateRowNames(); // Update names for all rows
                updateTotalPrice(); // Recalculate total price
            });

            // Remove a row when "Remove" button is clicked
            $(document).on('click', '.removeRow', function () {
                if ($('#DetailsTable tbody tr').length > 1) {
                    $(this).closest('tr').remove(); // Remove the closest row
                    updateRowNames(); // Update names for remaining rows
                    updateTotalPrice(); // Recalculate total price
                }
            });

            // Initial total price calculation on page load
            updateTotalPrice();
        });
    </script>


}
