@model PAWS_NDV_PetLovers.ViewModels.TransactionsVm
@{
    ViewData["Title"] = "DiagnosAppointment";
}


<div class="bg-secondary bg-opacity-10 py-2 mb-3">
    <div class="container">
        <h1>Diagnostics Appointment</h1>
    </div>
</div>


<div class="container">
    <form method="post" asp-action="Create" asp-controller="C_Diagnostics">
        <div class="row">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group col-lg-3 col-md-6">
                <label class="control-label">Owner ID - Name</label>
                <input name="id" class="form-control" value="@Model.Owner.id" readonly />
            </div>

            <div class="form-group col-lg-3 col-md-6 mt-4">
            <!-- Button trigger modal -->
                <button type="button" class="btn btn-success " data-bs-toggle="modal" data-bs-target="#staticBackdrop">
                    Select Pet
                </button>
            </div>

            <!-- Modal for selecting existing records -->
            <div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h1 class="modal-title fs-5" id="staticBackdropLabel">Select Record</h1>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form id="OwnerSelectionForm">
                                <table class="table table-striped w-100" id="OwnerTable">
                                    <thead>
                                        <tr>
                                            <th class="text-center">Selector</th>
                                            <th class="text-center">Pet ID</th>
                                            <th class="text-center">Pet Name</th>
                                            <th class="text-center">Breed</th>
                                            <th class="text-center">Gernder</th>
                                            <th class="text-center">Age</th>
                                            <th class="text-center">Bdate</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var pet in Model.Owner.Pets)
                                        {
                                            <tr>
                                                <td class="text-center">
                                                    <input type="radio" name="SelectedPetId"
                                                           value="@pet.id"
                                                           data-petid="@pet.id"
                                                           data-petname="@pet.petName"
                                                           data-breed="@pet.breed"
                                                           data-gender="@pet.gender"
                                                           data-age="@pet.age"
                                                           data-bdate="@pet.bdate" />
    
                                                </td>
                                                <td class="text-center">@Html.DisplayFor(modelItem => pet.id)</td>
                                                <td class="text-center">@Html.DisplayFor(modelItem => pet.petName)</td>
                                                <td class="text-center">@Html.DisplayFor(modelItem => pet.breed) </td>
                                                <td class="text-center">@Html.DisplayFor(modelItem => pet.gender)</td>
                                                <td class="text-center">@Html.DisplayFor(modelItem => pet.age)</td>
                                                <td class="text-center">@Html.DisplayFor(modelItem =>@pet.bdate)</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                    <button type="button" class="btn btn-primary" id="SelectPetButton">Select</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>


            <div class="container">
                <h3>Pet Information</h3>
            </div>

            <div class="form-group col-lg-3 col-md-6 visually-hidden ">
                <label asp-for="Diagnostics.petId" class="control-label"></label>
                <input asp-for="Diagnostics.petId" class="form-control petId" readonly required />
            </div>

            <div class="form-group visually-hidden ">
                <input asp-for="Diagnostics.date" class="form-control dateInput" />
            </div>


              <div class="form-group col-lg-3 col-md-6">
                <label  class="control-label">Pet Id</label>
                <input  class="form-control petId" readonly  />
            </div>

            <div class="form-group col-lg-3 col-md-6">
                <label class="control-label">Pet Name</label>
                <input id="petName" class="form-control" readonly />
            </div> 
            
            <div class="form-group col-lg-3 col-md-6">
                <label  class="control-label">Breed</label>
                <input  id="breed" class="form-control" readonly />
            </div>

            <div class="form-group col-lg-3 col-md-6">
                <label class="control-label">Gender</label>
                <input id="gender" class="form-control" readonly />
            </div>

            <div class="form-group col-lg-3 col-md-6">
                <label class="control-label">Age</label>
                <input id="age" class="form-control" readonly />
            </div>

            <div class="form-group col-lg-3 col-md-6">
                <label class="control-label">Birth Date</label>

                <input  id="bdate" class="form-control" readonly />
            </div>

            <div class="form-group visually-hidden">
                <input class="form-control dateInput" />
            </div>



            <!-- Diagnostics Details -->
            <div class="col-12">
                <table class="table mt-2" id="DetailsTable">
                    <thead>
                        <tr>
                            <th>Service</th>
                            <th class="vaccine-header visually-hidden">Vaccine Name</th> <!-- New header -->
                            <th>Diagnosis</th>
                            <th>Prescription</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="detailRow">
                            <td>
                                <div class="form-group mt-2">
                                    <select name="Diagnostics.IdiagnosticDetails[0].serviceId" class="form-control service-select" required>
                                        <option value="" data-price="0" disabled selected>Select Service</option>

                                        @foreach (var service in Model.Services.Where(s => s.serviceType == "NA"))
                                        {
                                            <option value="@service.serviceId" data-price="@service.serviceCharge" data-service-type="@service.serviceType.ToLower()" data-service-name="@service.serviceName.ToLower()">
                                                @service.serviceName
                                            </option>
                                        }

                                        @* for display laboratory items *@
                                        @{
                                            //check services
                                            var checkTypes = Model.Services
                                            .Select(s => s.serviceType)
                                            .Distinct();

                                            var type = string.Join(",", checkTypes).ToLower();

                                        }
                                        @if (type.Contains("lab"))
                                        {
                                            <optgroup label="Laboratory test">
                                                @foreach (var service in Model.Services.Where(s => s.serviceType != "NA"))
                                                {
                                                    <option value="@service.serviceId" data-price="@service.serviceCharge" data-service-type="@service.serviceType.ToLower()" data-service-name="@service.serviceName.ToLower()">
                                                        @service.serviceName
                                                    </option>
                                                }
                                            </optgroup>
                                        }

                                    </select>
                                    <input type="hidden" name="Diagnostics.IdiagnosticDetails[0].servicePrice" class="service-charge" value="" />
                                </div>
                            </td>
                            <td>
                                <div class="Vaccination">
                                    <input name="Diagnostics.IdiagnosticDetails[0].vaccineName" class="form-control bg-light visually-hidden mt-2 w-75" placeholder="Vaccine Name" />
                                </div>
                            </td>
                            <td>
                                <div class="diagnosisResult">
                                    <textarea name="Diagnostics.IdiagnosticDetails[0].diagnosis" class="form-control bg-light visually-hidden" rows="10" style="resize: none;" placeholder="(Optional)"></textarea>
                                </div>
                            </td>
                            <td>
                                <div class="prescription">
                                    <textarea name="Diagnostics.IdiagnosticDetails[0].prescription" class="form-control bg-light visually-hidden" rows="10" style="resize: none;" placeholder="(Optional)"></textarea>
                                </div>
                            </td>
                            <td>
                                <button type="button" class="btn btn-danger removeRow">Remove</button>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <button type="button" class="btn btn-success" id="addRow">Add Service</button>
            </div>



            <!-- Total Payment -->
            <div class="fixed-right-Payment ps-4" style="margin-right:0">
                <div class="form-group">
                    <label asp-for="Diagnostics.totalPayment" class="control-label fw-bold"></label>
                    <input asp-for="Diagnostics.totalPayment" id="totalPayment" class="form-control" readonly />
                    <a asp-action="Edit" asp-controller="Owners" class="btn btn-secondary" asp-route-id="@Model.Owner.id">Cancel</a>
                    <input type="submit" value="Save" class="btn btn-primary btn-md px-4 my-2" />
                </div>
            </div>
        </div>
    </form>
</div>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>

           $('#SelectPetButton').click(function () {
             var selectedPet = $('input[name="SelectedPetId"]:checked');
                if (selectedPet.length > 0) {

                    var petId = selectedPet.data('petid'); // Corrected case
                    var petName = selectedPet.data('petname'); // Corrected case
                    var breed = selectedPet.data('breed');
                    var gender = selectedPet.data('gender');
                    var age = selectedPet.data('age');
                    var bdate = selectedPet.data('bdate');

                    $('.petId').val(petId);
                    $('#petName').val(petName);
                    $('#breed').val(breed);
                    $('#gender').val(gender);
                    $('#age').val(age);
                    $('#bdate').val(bdate);

                    $('#staticBackdrop').modal('hide');
                } 
                else 
                {
                    alert("Please select a Pet.");
                }
                    
            });

        $(document).ready(function () {
            var checkupSelected = false; // Flag to track if "Checkup" or "Consult" is selected

            // Function to update the name attributes of input/select elements in each row
            function updateRowNames() {
                $('#DetailsTable tbody tr').each(function (index) {
                    $(this).find('input, select').each(function () {
                        var name = $(this).attr('name');
                        if (name) {
                            var newName = name.replace(/\d+/, index); // Update index for each element
                            $(this).attr('name', newName);
                        }
                    });
                });
            }

            // Function to calculate and update the total price based on service charges
            function updateTotalPrice() {
                var totalPrice = 0;

                $('#DetailsTable tbody tr').each(function () {
                    var $select = $(this).find('select.service-select');
                    var price = parseFloat($select.find('option:selected').data('price')) || 0;
                    $(this).find('input.service-charge').val(price); // Update hidden input with price
                    totalPrice += price; // Accumulate total price
                });

                $('#totalPayment').val(totalPrice.toFixed(2)); // Display total payment with 2 decimal places
            }

            // Function to toggle the visibility of fields based on selected service
            function toggleFields() {
                checkupSelected = false; // Reset flag for each check

                var vaccineColumnVisible = false; // Flag to track if vaccine column should be shown

                $('#DetailsTable tbody tr').each(function () {
                    var $select = $(this).find('select.service-select');
                    var selectedService = $select.find('option:selected').data('service-name') || '';
                    var selectedType = $select.find('option:selected').data('service-type') || '';

                    selectedService = selectedService.toLowerCase();
                    selectedType = selectedType.toLowerCase();

                    // Check if "Checkup" or "Consult" is selected
                    if (selectedService.includes('check') || selectedService.includes('consult')) {
                        checkupSelected = true;
                    }

                    // Show/hide fields based on selected service
                    if (selectedService.includes('check') || selectedType.includes('lab') || selectedService.includes('consult')) {
                        $(this).find('textarea[name$=".diagnosis"]').removeClass('visually-hidden');
                        $(this).find('textarea[name$=".prescription"]').removeClass('visually-hidden');
                    } else {
                        $(this).find('textarea[name$=".diagnosis"]').addClass('visually-hidden');
                        $(this).find('textarea[name$=".prescription"]').addClass('visually-hidden');
                    }

                    // Show prescription field if certain services are selected
                    if (selectedService.includes('vaccination') || selectedService.includes('vac')) {
                        $(this).find('input[name$=".vaccineName"]').removeClass('visually-hidden');
                        vaccineColumnVisible = true; // Show vaccine column
                    } else {
                        $(this).find('input[name$=".vaccineName"]').addClass('visually-hidden');
                    }
                });

                // Show/hide the vaccine name column based on the flag
                if (vaccineColumnVisible) {
                    $('#DetailsTable thead .vaccine-header').removeClass('visually-hidden');
                    $('#DetailsTable tbody .vaccine-cell').removeClass('visually-hidden');
                } else {
                    $('#DetailsTable thead .vaccine-header').addClass('visually-hidden');
                    $('#DetailsTable tbody .vaccine-cell').addClass('visually-hidden');
                }
            }

            // Add a new row to the table when "Add Service" button is clicked
            $('#addRow').click(function () {
                var rowCount = $('#DetailsTable tbody tr').length;
                var newRow = $('.detailRow').first().clone(); // Clone the first row

                newRow.find('input, select, textarea').each(function () {
                    var name = $(this).attr('name');
                    if (name) {
                        var newName = name.replace(/\d+/, rowCount); // Update name attribute for the new row
                        $(this).attr('name', newName);
                    }
                    $(this).val(''); // Clear the value of the input/select
                });

                newRow.appendTo($('#DetailsTable tbody')); // Append new row to table body
                updateRowNames(); // Update names for all rows
                updateTotalPrice(); // Recalculate total price
                toggleFields(); // Update field visibility for the new row
            });

            // Remove a row when "Remove" button is clicked
            $(document).on('click', '.removeRow', function () {
                if ($('#DetailsTable tbody tr').length > 1) {
                    $(this).closest('tr').remove(); // Remove the closest row
                    updateRowNames(); // Update names for remaining rows
                    updateTotalPrice(); // Recalculate total price
                    toggleFields(); // Update field visibility after removal
                }
            });

            // Handle changes in the service selection
            $(document).on('change', 'select.service-select', function () {
                var $this = $(this);
                var selectedService = $this.find('option:selected').data('service-name');
                var previousService = $this.data('previous-service-name');

                if (typeof selectedService === 'undefined') {
                    console.error('The selected option does not have a data-service-name attribute.');
                    return;
                }

                selectedService = selectedService.toLowerCase();

                // Reset checkupSelected flag if changing from "Checkup" or "Consult"
                if (previousService && (previousService.includes('check') || previousService.includes('consult'))) {
                    checkupSelected = false;
                }

                // Prevent re-selection of "Checkup" or "Consult" if already selected
                if ((selectedService.includes('check') || selectedService.includes('consult')) && checkupSelected) {
                    alert("Checkup / Consultation can only be selected once.");
                    $this.val(previousService); // Revert to previous value

                    $(this).val('').change(); // Reset the select
                    $this.trigger('change'); // Trigger change event to update UI
                    $(this).closest('tr').find('textarea').addClass('visually-hidden'); // Hide fields if reset
                    return;
                }

                // Store the selected service as the previous service
                $this.data('previous-service-name', selectedService);
                toggleFields(); // Update field visibility based on the new selection
                updateTotalPrice(); // Recalculate total price
            });

            // Initialize previous-service-name data attribute for each select element
            $('select.service-select').each(function () {
                var selectedService = $(this).find('option:selected').data('service-name');
                $(this).data('previous-service-name', selectedService ? selectedService.toLowerCase() : '');
            });
        });
    </script>

}