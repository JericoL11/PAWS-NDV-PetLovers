@model PAWS_NDV_PetLovers.ViewModels.TransactionsVm
@{
    ViewData["Title"] = "Purchase VC";
}
<div class="card">
      <div class="table-responsive">

          <div class="text-end p-3">
            <button type="button" class="btn btn-confirm btn-sm" data-bs-toggle="modal" data-bs-target="#staticBackdropSelectedProduct">
                Add Products
            </button>
          </div>

        <table class="table table-bordered text-center">
        <thead>
            <tr>
                <th class="text-center">Product ID</th>
                <th class="text-center">Product Name</th>
                <th class="text-center">Price</th>
                <th class="text-center">Order Qty</th>
                <th class="text-end">
                   
                </th>
                @if(Model.IPurchaseDetails.Count() > 0)
                {
                <th>
                    <form method="get" asp-action="RemoveProduct" asp-controller="Billing">

                            <!-- Button trigger modal -->
                        <button type="button" class="btn btn-outline-danger removeButtonMdl" data-bs-toggle="modal" asp-route-id="@Model.Diagnostics.diagnostic_Id" data-bs-target="#staticBackdropRemove">
                            Decrease Qnty.
                        </button>

                    </form>
                 </th>
                }
                
            </tr>
        </thead>
        <tbody>
            @{
                var Products = Model.IPurchaseDetails
                .GroupBy(pd => new { pd.productId, pd.product.productName, pd.sellingPrice })
                .Select(g => new
                {
                    ProductId = g.Key.productId,
                    ProductName = g.Key.productName,
                    ProductPrice = g.Key.sellingPrice,
                    TotalQuantity = g.Sum(pd => pd.quantity)  // Sum quantities for each product
                })
                .ToList();
            }

            @if (Products != null && Products.Count > 0)
            {
                @foreach (var item in Products)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.ProductId)</td>
                        <td>@Html.DisplayFor(modelItem => item.ProductName)</td>
                        <td>@Html.DisplayFor(modelItem => item.ProductPrice)</td>
                        <td>@Html.DisplayFor(modelItem => item.TotalQuantity)</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="5" class="text-secondary text-center">No Products</td>
                </tr>
            }
        </tbody>

    </table>
      </div>
    <!-- Modal Remove Product -->
    <div class="modal fade" id="staticBackdropRemove" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                 
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (ViewData["RemoveErrorMessage"] != null)
                    {
                        <div class="alert alert-danger">
                            @ViewData["RemoveErrorMessage"]
                        </div>
                    }

                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Product ID</th>
                                    <th>Product Name</th>
                                    <th>Order Qnty</th>
                                    <th>Total Decrement</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach(var item in Model.IPurchaseDetails)
                                {
                                    <form method="post" asp-action="RemoveProduct">
                                        <tr>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.product.id)
                                            </td>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.product.productName)
                                            </td>
                                            <td class="text-center">
                                                @Html.DisplayFor(modelItem => item.quantity)
                                            </td>
                                                <input type="hidden" value="@Model.Diagnostics.diagnostic_Id" name="diagnosticId" />
                                                <input type="hidden" value="@item.purchaseId" name="purchaseId" />
                                                <input type="hidden" value="@item.productId" name="productId" />

                                                 <td><input type="number" name="quantity" class="form-control orderQtyInput orderItemQty" min="1" max="@item.quantity" /></td>

                                                <input type="hidden" value="@item.Purchase.diagnosisId_holder" name="diagnosticId" />
                                            <td><button type="submit" class="btn btn-danger">Remove</button></td>
                                       
                                        </tr>
                                </form>
                                }
                            </tbody>
                        </table>
                
                   
                  @*<input  id="ProdId_Receiver" />*@



                </div>
            @*     <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary">Understood</button>
                </div> *@
            </div>
        </div>
    </div>



    <!-- Modal for View Selected Product / Create -->
    <div class="modal fade" id="staticBackdropSelectedProduct" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <form method="post" asp-action="CreatePurchaseDiagnostics">
                    <div class="modal-header bg-primary">
                        <h1 class="modal-title fs-5 text-white" id="staticBackdropLabel">Selected Product List</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>

                    <div class="modal-body">
                        @if (ViewData["ErrorMessage"] != null)
                        {
                            <div class="alert alert-danger">
                                @ViewData["ErrorMessage"]
                            </div>
                        }
                        @* Display Selected Product*@
                        <div class="row justify-content-center">
                            <table class="table border w-75" id="purchaseTable">
                                <thead>
                                    <tr>
                                        <th class="text-center">Id</th>
                                        <th class="text-center">Name</th>
                                        <th class="text-center">Category</th>
                                        <th class="text-center">Stock</th>
                                        <th class="text-center">Price</th>
                                        <th>Order Quantity</th>
                                    </tr>
                                </thead>

                                <tbody>

                                    <!--pRODUCT WILL DISPLAY HERE-->
                                  
                                </tbody>

                            </table>
                        </div>

                    </div>


                    <div class="modal-footer">
                        <input type="date" name="Purchase.Date" class="dateInput visually-hidden" />
                        <input name="Purchase.diagnosisId_Holder" class="visually-hidden" value="@Model.Diagnostics.diagnostic_Id" />
                        @{
                            var customerName = $"{Model.Diagnostics.pet.owner.fname} {Model.Diagnostics.pet.owner.lname}";
                        }
                        <input class="visually-hidden" name="Purchase.customerName" value="@customerName" />
                        <input class="visually-hidden" name="diagnosticid" value="@Model.Diagnostics.diagnostic_Id" />


                        <button type="button" id="AddProductBtn" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
                            Select Product
                        </button>

                        <button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Save</button>
                    </div>
                </form>
            </div>
        </div>
    </div>



    <!-- Modal for selecting Products  / Select Product - INDEX-->
    <div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-primary">
                    @* <h1 class="modal-title fs-5" id="staticBackdropLabel">Select Product</h1>  *@
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <table class="table hover" id="modalProductTbl">
                            <thead>
                                <tr>
                                    <th class="text-center">Select</th>
                                    <th class="text-center">Id</th>
                                    <th class="text-center">Name</th>
                                    <th class="text-center">Category</th>
                                    <th class="text-center">Stock</th>
                                    <th class="text-center">Price</th>
                                    <th class="text-center">Order Quantity</th>
                                </tr>
                            </thead>
                            <tbody>

                                @{
                                    var Iproducts = Model.IProducts.Where(p => p.quantity > 0).Select(p => p);
                                }
                                @foreach (var product in @Iproducts)
                                {
                                    <tr>
                                        <td class="text-center"><input type="checkbox" class="selectProduct form-check-input" data-id="@product.id" data-name="@product.productName" data-category="@product.category.categoryName" data-qty="@product.quantity" data-price="@product.sellingPrice" /></td>
                                        <td class="text-center">@product.id</td>
                                        <td class="text-center">@product.productName</td>
                                        <td class="text-center">@product.category.categoryName</td>
                                        <td class="text-center">@product.quantity</td>
                                        <td class="text-center">@product.sellingPrice</td>
                                        <td><input type="number" class="form-control orderQtyInput orderItemQty" min="1" max="@product.quantity" value="1" /></td>
                                    </tr>
                                }
                            </tbody>
                        </table>


                        <div class="modal-footer">
                            <div class="text-danger me-2" id="selectionWarning" style="display:none;">Product is already selected.</div>
                            <button type="button" class="btn btn-secondary bg-opacity-10" id="ViewSelectedProduct">Cancel</button>

                            @* <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button> *@
                            <button type="button" class="btn btn-primary" id="SelectProductButton">Add</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/js/TransactionsDT/modalProductTable.js" defer></script>
        <script>

            $(document).ready(function () {
            var rowIndex = 0; // Initialize row index counter

                // Reset the quantity input fields when the modal is shown
                $('#staticBackdrop').on('show.bs.modal', function () {
                    $('.orderQtyInput').val(1); // Reset quantity to 1 or any default value

                    $('#selectionWarning').hide(); // Hide warning when showing the modal
                });

                $('#AddProductBtn').on('click', function () {
                    $('#staticBackdropSelectedProduct').modal('hide');
                });

                $('#ViewSelectedProduct').on('click', function () {
                    $('#selectionWarning').hide();
                    // Dismiss the modal after adding the products
                    $('#staticBackdrop').modal('hide');

                    $('#staticBackdropSelectedProduct').modal('show');
                });

                // Add selected products to the main table -- Modal
                $('#SelectProductButton').on('click', function () {
                    var productAlreadySelected = false;
                    var quantityExceedsLimit = false;

                    // Check if any products are selected
                    if ($('.selectProduct:checked').length === 0) {
                        $('#selectionWarning').text('Please select a product.').show();
                        return; // Exit the function to prevent further processing
                    }

                    $('.selectProduct:checked').each(function () {
                        var productId = $(this).data('id');
                        var productName = $(this).data('name');
                        var productCategory = $(this).data('category');
                        var qtyOnHand = $(this).data('qty');
                        var price = $(this).data('price');
                        var orderQty = $(this).closest('tr').find('.orderQtyInput').val();

                        // Check if product is already selected
                        if ($("#purchaseTable input[type='hidden'][value='" + productId + "']").length > 0) {
                            productAlreadySelected = true;
                            return;
                        }

                        // Check if selected quantity exceeds available quantity
                        if (parseInt(orderQty) > parseInt(qtyOnHand)) {
                            quantityExceedsLimit = true;
                            return;
                        }

                        // Create a new row with the selected product details and include the unique index
                        var newRow = `
                                    <tr class="detailRow">
                                        <td class="text-center"><input type="hidden" name="Purchase.purchaseDetails[${rowIndex}].ProductId" value="${productId}" /> ${productId}</td>
                                        <td class="text-center">${productName}</td>
                                        <td class="text-center">${productCategory}</td>
                                        <td class="text-center">${qtyOnHand}</td>
                                        <td class="text-center">${price}</td>
                                        <td class="text-center"><input type="number" name="Purchase.purchaseDetails[${rowIndex}].quantity" class="form-control orderItemQty" value="${orderQty}" min="1" max="${qtyOnHand}" /></td>
                                        <td class="text-center"><input type="hidden" name="Purchase.purchaseDetails[${rowIndex}].sellingPrice" class="form-control w-50" value="${price}"/></td>

                                        <td><button type="button" class="btn btn-danger removeRow">Remove</button></td>

                                    </tr>

                                `;

                        $('#purchaseTable tbody').append(newRow);
                        rowIndex++; // Increment the row index counter
                    });


                    if (productAlreadySelected) {
                        $('#selectionWarning').text('Product is already selected.').show();
                    } else if (quantityExceedsLimit) {
                        $('#selectionWarning').text('Selected quantity exceeds available stock.').show();
                    } else {
                        $('#selectionWarning').hide();
                        // Dismiss the modal after adding the products
                        $('#staticBackdrop').modal('hide');
                        $('#staticBackdropSelectedProduct').modal('show');
                    }

                    // Uncheck all checkboxes after adding
                    $('.selectProduct').prop('checked', false);

                });

                $('.removeButtonMdl').on('click', function () {
                    var productId = $(this).data('id');
                    $('#ProdId_Receiver').val(productId);
                });

                // Initialize DataTable on modal open to ensure alignment
                $('#staticBackdrop').on('shown.bs.modal', function () {
            if ($.fn.DataTable.isDataTable('#modalProductTbl')) {
                        $('#modalProductTbl').DataTable().destroy();
                    }

                    $('#modalProductTbl').DataTable({
                        "ordering": true,
                        "paging": true,
                        "searching": true,
                        "info": true,
                        "autoWidth": true

                    });
                });

                // Remove row from the table
                $(document).on('click', '.removeRow', function () {
                    $(this).closest('tr').remove();
                });

                // Validate quantity input on change
                $(document).on('input', '.orderItemQty', function () {
                    var max = $(this).attr('max');
                    var value = $(this).val();
                    if (parseInt(value) < 1) {
                        $(this).val(1); // Set value to 1 if less than 1
                    } else if (parseInt(value) > parseInt(max)) {
                        $(this).val(max); // Limit value to max if exceeds
                    }
                });
            });

            $(document).ready(function () {
                // Check if there's an error message and open the modal automatically
                if ('@ViewData["ErrorMessage"]' !== '') {
                    $('#staticBackdropSelectedProduct').modal('show');
                }
            });

            $(document).ready(function () {
                // Check if there's an error message and open the modal automatically
                if ('@ViewData["RemoveErrorMessage"]' !== '') {
                    $('#staticBackdropRemove').modal('show');
                }
            });
        </script>
    
